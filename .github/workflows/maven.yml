# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI CD generate and push a docker image with Maven

on:
  push:
    branches: [ "main" ]

jobs:

  sonarAnalysis:
    name: Analyze with SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: | 
          cd ./RabbitMQAPI 
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=neitonjc_RabbitMQAPISpring
            
  build:
    runs-on: ubuntu-latest
    needs: sonarAnalysis
    steps:      
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -f RabbitMQAPI/pom.xml clean install
    - name: Build and push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
       image: neitonjc/rabbitmq_api
       tags: 0.0.8, latest
       registry: docker.io
       dockerfile: Dockerfile
       username: ${{ secrets.DOCKERHUB_USER }}
       password: ${{ secrets.DOCKERHUB_PASS }}
       
  deploy:
    runs-on: self-hosted
    env:
      SPRING_RABBITMQ_HOST: ${{ secrets.SPRING_RABBITMQ_HOST }}
      SPRING_RABBITMQ_PORT: ${{ secrets.SPRING_RABBITMQ_PORT }}
      SPRING_RABBITMQ_USERNAME: ${{ secrets.SPRING_RABBITMQ_USERNAME }}
      SPRING_RABBITMQ_PASSWORD: ${{ secrets.SPRING_RABBITMQ_PASSWORD }}
    needs: build
    steps:
     - name: Run docker-compose
       run: docker-compose -f /opt/testes_apis/api_rabbit/docker-compose.yml stop && docker-compose -f /opt/testes_apis/api_rabbit/docker-compose.yml pull && docker-compose -f /opt/testes_apis/api_rabbit/docker-compose.yml up -d
     - name: Check running containers
       run: docker ps -a
