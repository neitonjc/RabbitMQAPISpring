# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI CD generate and push a docker image with Maven

on:
  push:
    branches: [ "main" ]

jobs:

  sonarAnalysis:
    runs-on: ubuntu-latest
    steps:
      - name: Analyze with SonarCloud         
        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the sonarcloud scanner
          args:             
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=neitonjc_RabbitMQAPISpring
            -Dsonar.organization=neitonjc
            -Dsonar.java.binaries=neitonjc_RabbitMQAPISpring/target/classes
            -Dsonar.language=java
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= src/main/java/
            # When you need the analysis to take place in a directory other than the one from which it was launched
            #-Dsonar.projectBaseDir= # optional, default is .
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
            
  build:
    runs-on: ubuntu-latest
    needs: sonarAnalysis
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -f RabbitMQAPI/pom.xml clean install
      
    - name: Build and push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
       image: neitonjc/rabbitmq_api
       tags: 0.0.8, latest
       registry: docker.io
       dockerfile: Dockerfile
       username: ${{ secrets.DOCKERHUB_USER }}
       password: ${{ secrets.DOCKERHUB_PASS }}
       
  deploy:
    runs-on: self-hosted
    env:
      SPRING_RABBITMQ_HOST: ${{ secrets.SPRING_RABBITMQ_HOST }}
      SPRING_RABBITMQ_PORT: ${{ secrets.SPRING_RABBITMQ_PORT }}
      SPRING_RABBITMQ_USERNAME: ${{ secrets.SPRING_RABBITMQ_USERNAME }}
      SPRING_RABBITMQ_PASSWORD: ${{ secrets.SPRING_RABBITMQ_PASSWORD }}
    needs: build
    steps:
     - name: Run docker-compose
       run: docker-compose -f /opt/testes_apis/api_rabbit/docker-compose.yml stop && docker-compose -f /opt/testes_apis/api_rabbit/docker-compose.yml pull && docker-compose -f /opt/testes_apis/api_rabbit/docker-compose.yml up -d
     - name: Check running containers
       run: docker ps -a
